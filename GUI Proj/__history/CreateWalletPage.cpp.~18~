#include <vcl.h>
#include <fstream>
#include <direct.h>  // For mkdir function (to create directory)
#include <sys/stat.h> // For stat() to check directory existence
#include <regex> // For email validation
#pragma hdrstop
#pragma package(smart_init)
#pragma resource "*.dfm"
#include "CreateWalletPage.h"

TCreateWalletForm *CreateWalletForm;

__fastcall TCreateWalletForm::TCreateWalletForm(TComponent* Owner)
    : TForm(Owner)
{
}

String hashPassword(const String &password)
{
    unsigned long hash = 5381;
    for (int i = 1; i <= password.Length(); ++i)
    {
        hash = ((hash << 5) + hash) + password[i];
    }
    return IntToStr(static_cast<int>(hash));
}

// Check if password is in breached list (same as your CLI check)
bool isPasswordBreached(const String &password)
{
    std::ifstream breachFile("D:\\Crypto Wallet\\CLI Proj\\pwd.txt");
    std::string breachedPassword;
    while (std::getline(breachFile, breachedPassword))
    {
        if (breachedPassword == AnsiString(password).c_str())
        {
            return true;
        }
    }
    return false;
}

// Convert UnicodeString (or String) to std::string using AnsiString
std::string StringToStdString(const String &str)
{
    AnsiString ansiStr = str;
    return std::string(ansiStr.c_str());
}

// Function to check if a directory exists
bool directoryExists(const char* directory)
{
    struct stat info;
    return (stat(directory, &info) == 0 && (info.st_mode & S_IFDIR));
}

// Check if the email is already registered
bool isEmailRegistered(const String &email)
{
    std::ifstream accountsFile("D:\\Crypto Wallet\\CLI Proj\\accounts.txt");
    std::string storedEmail, storedPassword, storedWalletFile;

    while (std::getline(accountsFile, storedEmail, ' ') &&
           std::getline(accountsFile, storedPassword, ' ') &&
           std::getline(accountsFile, storedWalletFile))
    {
        // Check if the stored email matches the provided email
        if (storedEmail == AnsiString(email).c_str())
        {
            return true; // Email found
        }
    }
    return false; // Email not found
}

// Create the wallet file for the user
void createWalletFile(const String &email)
{
    String walletFile = email + "_wallet.txt";
    std::ofstream wallet(AnsiString("D:\\Crypto Wallet\\CLI Proj\\" + walletFile).c_str());

    if (wallet.is_open())
    {
        wallet << "BTC 0.00" << std::endl;  // Initialize with 0 balance
        wallet << "ETH 0.00" << std::endl;
        wallet << "SOL 0.00" << std::endl;
        wallet << "TRX 0.00" << std::endl;
        wallet << "USDT 0.00" << std::endl;
        wallet.close();
    }
    else
    {
        ShowMessage("Failed to create wallet file.");
    }
}

// Basic email validation function (checks for "@" and ".com")
bool isValidEmail(const String &email)
{
    std::string emailStr = StringToStdString(email);
    const std::regex emailPattern("[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.com$");
    return std::regex_match(emailStr, emailPattern);
}

// On Create Wallet Button Click
void __fastcall TCreateWalletForm::btnCreateClick(TObject *Sender)
{
    String email = edtEmail->Text.Trim();
    String password = edtPassword->Text;

    // Input validation
    if (email.IsEmpty() || password.IsEmpty())
    {
        ShowMessage("Email and Password cannot be empty!");
        return;
    }

    // Validate email format
    if (!isValidEmail(email))
    {
        ShowMessage("Please enter a valid email address (e.g., example@domain.com).");
        return;
    }

    // Check if the email is already registered
    if (isEmailRegistered(email))
    {
        ShowMessage("Email is already registered. Please use a different email.");
        return;
    }

    // Hash the password
    String hashedPassword = hashPassword(password);

    // Ensure the directory exists or create it if it does not
    const char* directory = "D:\\Crypto Wallet\\CLI Proj";
    if (!directoryExists(directory))
    {
        if (_mkdir(directory) != 0)
        {
            ShowMessage("Failed to create directory. Check if you have write permissions.");
            return;
        }
    }

    // Save user details to accounts.txt in the specific directory, including wallet file name
    std::ofstream accountsFile("D:\\Crypto Wallet\\CLI Proj\\accounts.txt", std::ios::app);
    String walletFile = email + "_wallet.txt";
    accountsFile << AnsiString(email).c_str() << " "
                 << AnsiString(hashedPassword).c_str() << " "
                 << AnsiString(walletFile).c_str() << std::endl;
    accountsFile.close();

    // Create the wallet file now
    createWalletFile(email);

    // Display message confirming that account information and wallet file were created
    ShowMessage("Account created successfully! Wallet file created and details saved.");
    Close();
}

// On Cancel Button Click
void __fastcall TCreateWalletForm::btnCancelClick(TObject *Sender)
{
    Close();
}

